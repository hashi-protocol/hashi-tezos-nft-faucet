parameter (or (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))) (or (pair %mint (pair (address %address) (nat %amount)) (pair (string %name) (pair (nat %token_id) (string %url)))) (address %set_administrator))) (or (or (pair %set_metadata (string %k) (bytes %v)) (bool %set_pause)) (or (list %transfer (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (list %update_operators (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))))));
storage   (pair (pair (pair (address %administrator) (set %all_tokens nat)) (pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (bool %paused)) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (big_map %total_minted address nat) (big_map %total_supply nat nat)))));
code
  {
    CAST (pair (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))) (or (pair (pair address nat) (pair string (pair nat string))) address)) (or (or (pair string bytes) bool) (or (list (pair address (list (pair address (pair nat nat))))) (list (or (pair address (pair address nat)) (pair address (pair address nat))))))) (pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))))); # pair (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))) (or (pair (pair address nat) (pair string (pair nat string))) address)) (or (or (pair string bytes) bool) (or (list (pair address (list (pair address (pair nat nat))))) (list (or (pair address (pair address nat)) (pair address (pair address nat))))))) (pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))))
    UNPAIR;     # or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))) (or (pair (pair address nat) (pair string (pair nat string))) address)) (or (or (pair string bytes) bool) (or (list (pair address (list (pair address (pair nat nat))))) (list (or (pair address (pair address nat)) (pair address (pair address nat)))))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))
            # == balance_of ==
            # sp.verify(~ self.data.paused, 'FA2_PAUSED') # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))
            DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))
            DUG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            GET 3;      # pair (big_map (pair address (pair address nat)) unit) bool : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            CDR;        # bool : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            IF
              {
                PUSH string "FA2_PAUSED"; # string : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                FAILWITH;   # FAILED
              }
              {}; # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            # def f0(lparams_0):
            #   sp.verify(self.data.token_metadata.contains(lparams_0.token_id), 'FA2_TOKEN_UNDEFINED')
            #   sp.if self.data.ledger.contains((sp.set_type_expr(lparams_0.owner, sp.TAddress), sp.set_type_expr(lparams_0.token_id, sp.TNat))):
            #     sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(lparams_0.owner, sp.TAddress), token_id = sp.set_type_expr(lparams_0.token_id, sp.TNat)), balance = self.data.ledger[(sp.set_type_expr(lparams_0.owner, sp.TAddress), sp.set_type_expr(lparams_0.token_id, sp.TNat))].balance))
            #   sp.else:
            #     sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(lparams_0.owner, sp.TAddress), token_id = sp.set_type_expr(lparams_0.token_id, sp.TNat)), balance = 0))
            # responses = sp.local("responses", params.requests.map(sp.build_lambda(f0))) # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            DUP;        # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            CAR;        # list (pair address nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            MAP
              {
                # sp.verify(self.data.token_metadata.contains(lparams_0.token_id), 'FA2_TOKEN_UNDEFINED') # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP 3;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 5;      # big_map nat (pair nat (map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair address nat : big_map nat (pair nat (map string bytes)) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # pair address nat : pair address nat : big_map nat (pair nat (map string bytes)) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUG 2;      # pair address nat : big_map nat (pair nat (map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CDR;        # nat : big_map nat (pair nat (map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                MEM;        # bool : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {}
                  {
                    PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }; # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                # if self.data.ledger.contains((sp.set_type_expr(lparams_0.owner, sp.TAddress), sp.set_type_expr(lparams_0.token_id, sp.TNat))): # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP 3;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 3;      # big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CDR;        # nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # pair address nat : pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUG 3;      # pair address nat : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # address : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                PAIR;       # pair address nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                MEM;        # bool : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {
                    # sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(lparams_0.owner, sp.TAddress), token_id = sp.set_type_expr(lparams_0.token_id, sp.TNat)), balance = self.data.ledger[(sp.set_type_expr(lparams_0.owner, sp.TAddress), sp.set_type_expr(lparams_0.token_id, sp.TNat))].balance)) # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    DUP 3;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    GET 3;      # big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    SWAP;       # pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    CDR;        # nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    SWAP;       # pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    DUP;        # pair address nat : pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    DUG 3;      # pair address nat : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    CAR;        # address : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    PAIR;       # pair address nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    GET;        # option nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    IF_NONE
                      {
                        PUSH int 426; # int : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:426 # @some : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                      }; # @some : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    SWAP;       # pair address nat : @some : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    PAIR;       # pair (pair address nat) @some : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }
                  {
                    # sp.result(sp.record(request = sp.record(owner = sp.set_type_expr(lparams_0.owner, sp.TAddress), token_id = sp.set_type_expr(lparams_0.token_id, sp.TNat)), balance = 0)) # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    PUSH nat 0; # nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    SWAP;       # pair address nat : nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    PAIR;       # pair (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }; # pair (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
              }; # list (pair (pair address nat) nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            # sp.transfer(responses.value, sp.tez(0), sp.set_type_expr(params.callback, sp.TContract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance")))))) # list (pair (pair address nat) nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            NIL operation; # list operation : list (pair (pair address nat) nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            DIG 2;      # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : list operation : list (pair (pair address nat) nat) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            CDR;        # contract (list (pair (pair address nat) nat)) : list operation : list (pair (pair address nat) nat) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            PUSH mutez 0; # mutez : contract (list (pair (pair address nat) nat)) : list operation : list (pair (pair address nat) nat) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            DIG 3;      # list (pair (pair address nat) nat) : mutez : contract (list (pair (pair address nat) nat)) : list operation : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            CONS;       # list operation : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
          }
          {
            IF_LEFT
              {
                # == mint ==
                # sp.verify(sp.sender == params.address, 'You can only mint to your address') # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair address nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # address : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SENDER;     # @sender : address : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                COMPARE;    # int : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                EQ;         # bool : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {}
                  {
                    PUSH string "You can only mint to your address"; # string : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }; # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                # if ~ (self.data.total_minted.contains(sp.sender)): # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                DUG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 7;      # big_map address nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SENDER;     # @sender : big_map address nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                MEM;        # bool : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {}
                  {
                    SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    # self.data.total_minted[sp.sender] = 0 # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    GET 7;      # big_map address nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    PUSH (option nat) (Some 0); # option nat : big_map address nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    SENDER;     # @sender : option nat : big_map address nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    UPDATE;     # big_map address nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    UPDATE 7;   # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    SWAP;       # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }; # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                # sp.verify(self.data.total_minted[sp.sender] < 100, 'You can only mint max 100 NFTs') # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                PUSH nat 100; # nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP 3;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 7;      # big_map address nat : nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SENDER;     # @sender : big_map address nat : nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET;        # option nat : nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF_NONE
                  {
                    PUSH int 527; # int : nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:527 # @some : nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }; # @some : nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                COMPARE;    # int : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                LT;         # bool : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {}
                  {
                    PUSH string "You can only mint max 100 NFTs"; # string : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }; # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                # sp.verify(params.amount == 1, 'NFT-asset: amount <> 1') # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair address nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CDR;        # nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                PUSH nat 1; # nat : nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                COMPARE;    # int : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                EQ;         # bool : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {}
                  {
                    PUSH string "NFT-asset: amount <> 1"; # string : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }; # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                # sp.verify(~ (self.data.all_tokens.contains(params.token_id)), 'NFT-asset: cannot mint twice same token') # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                DUG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair address (set nat) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CDR;        # set nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair address nat) (pair string (pair nat string)) : set nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : set nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUG 2;      # pair (pair address nat) (pair string (pair nat string)) : set nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 5;      # nat : set nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                MEM;        # bool : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {
                    PUSH string "NFT-asset: cannot mint twice same token"; # string : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }
                  {}; # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                # self.data.all_tokens.add(params.token_id) # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                UNPAIR;     # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                UNPAIR;     # address : set nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                SWAP;       # set nat : address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                PUSH bool True; # bool : set nat : address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                DUP 6;      # pair (pair address nat) (pair string (pair nat string)) : bool : set nat : address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                GET 5;      # nat : bool : set nat : address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                UPDATE;     # set nat : address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                SWAP;       # address : set nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                PAIR;       # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                PAIR;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                # if self.data.ledger.contains((sp.set_type_expr(params.address, sp.TAddress), sp.set_type_expr(params.token_id, sp.TNat))): # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                DUG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 3;      # big_map (pair address nat) nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair address nat) (pair string (pair nat string)) : big_map (pair address nat) nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : big_map (pair address nat) nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 5;      # nat : pair (pair address nat) (pair string (pair nat string)) : big_map (pair address nat) nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair address nat) (pair string (pair nat string)) : nat : big_map (pair address nat) nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : nat : big_map (pair address nat) nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUG 3;      # pair (pair address nat) (pair string (pair nat string)) : nat : big_map (pair address nat) nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair address nat : nat : big_map (pair address nat) nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # address : nat : big_map (pair address nat) nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                PAIR;       # pair address nat : big_map (pair address nat) nat : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                MEM;        # bool : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {
                    SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    # self.data.ledger[(sp.set_type_expr(params.address, sp.TAddress), sp.set_type_expr(params.token_id, sp.TNat))].balance += params.amount # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    UNPAIR;     # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    DIG 5;      # pair (pair address nat) (pair string (pair nat string)) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    GET 5;      # nat : pair (pair address nat) (pair string (pair nat string)) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    SWAP;       # pair (pair address nat) (pair string (pair nat string)) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    DUG 7;      # pair (pair address nat) (pair string (pair nat string)) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    CAR;        # pair address nat : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    GET;        # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    IF_NONE
                      {
                        PUSH int 550; # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    DUP 7;      # pair (pair address nat) (pair string (pair nat string)) : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    CAR;        # pair address nat : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    CDR;        # nat : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    ADD;        # nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    SOME;       # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    SWAP;       # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    PAIR;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    SWAP;       # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }
                  {
                    SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    # self.data.ledger[(sp.set_type_expr(params.address, sp.TAddress), sp.set_type_expr(params.token_id, sp.TNat))] = sp.record(balance = params.amount) # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    UNPAIR;     # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    DUP 5;      # pair (pair address nat) (pair string (pair nat string)) : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    CAR;        # pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    CDR;        # nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    SOME;       # option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    DIG 5;      # pair (pair address nat) (pair string (pair nat string)) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    GET 5;      # nat : pair (pair address nat) (pair string (pair nat string)) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    SWAP;       # pair (pair address nat) (pair string (pair nat string)) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                    DUG 7;      # pair (pair address nat) (pair string (pair nat string)) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    CAR;        # pair address nat : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    CAR;        # address : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    SWAP;       # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    PAIR;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address nat) (pair string (pair nat string))
                    PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    SWAP;       # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }; # pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                # if self.data.token_metadata.contains(params.token_id): # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                DUG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 5;      # big_map nat (pair nat (map string bytes)) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair address nat) (pair string (pair nat string)) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # pair (pair address nat) (pair string (pair nat string)) : pair (pair address nat) (pair string (pair nat string)) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUG 2;      # pair (pair address nat) (pair string (pair nat string)) : big_map nat (pair nat (map string bytes)) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 5;      # nat : big_map nat (pair nat (map string bytes)) : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                MEM;        # bool : pair (pair address nat) (pair string (pair nat string)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {
                    SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    # self.data.total_supply[params.token_id] = params.amount # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    GET 8;      # big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP 3;      # pair (pair address nat) (pair string (pair nat string)) : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    CAR;        # pair address nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    CDR;        # nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    SOME;       # option nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DIG 3;      # pair (pair address nat) (pair string (pair nat string)) : option nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    GET 5;      # nat : option nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    UPDATE;     # big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    UPDATE 8;   # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }
                  {
                    SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    # self.data.token_metadata[params.token_id] = sp.record(token_id = params.token_id, token_info = {'name' : sp.pack(sp.set_type_expr(params.name, sp.TString)), 'token_url' : sp.pack(sp.set_type_expr(params.url, sp.TString))}) # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    GET 5;      # big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    EMPTY_MAP string bytes; # map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP 4;      # pair (pair address nat) (pair string (pair nat string)) : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    GET 3;      # string : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    PACK;       # bytes : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    SOME;       # option bytes : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    PUSH string "name"; # string : option bytes : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    UPDATE;     # map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP 4;      # pair (pair address nat) (pair string (pair nat string)) : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    GET 6;      # string : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    PACK;       # bytes : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    SOME;       # option bytes : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    PUSH string "token_url"; # string : option bytes : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    UPDATE;     # map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP 4;      # pair (pair address nat) (pair string (pair nat string)) : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    GET 5;      # nat : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    PAIR;       # pair nat (map string bytes) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    SOME;       # option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP 4;      # pair (pair address nat) (pair string (pair nat string)) : option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    GET 5;      # nat : option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    UPDATE;     # big_map nat (pair nat (map string bytes)) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    UPDATE 5;   # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    # self.data.total_supply[params.token_id] = params.amount # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    GET 8;      # big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DUP 3;      # pair (pair address nat) (pair string (pair nat string)) : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    CAR;        # pair address nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    CDR;        # nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    SOME;       # option nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair address nat) (pair string (pair nat string))
                    DIG 3;      # pair (pair address nat) (pair string (pair nat string)) : option nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    GET 5;      # nat : option nat : big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    UPDATE;     # big_map nat nat : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    UPDATE 8;   # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }; # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
              }
              {
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : address
                # == set_administrator ==
                # sp.verify(sp.sender == self.data.administrator, 'FA2_NOT_ADMIN') # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : address
                DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : address
                DUG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : address : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : address : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair address (set nat) : address : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # address : address : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SENDER;     # @sender : address : address : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                COMPARE;    # int : address : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                EQ;         # bool : address : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {}
                  {
                    PUSH string "FA2_NOT_ADMIN"; # string : address : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }; # address : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : address
                # self.data.administrator = params # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : address
                UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : address
                UNPAIR;     # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : address
                CDR;        # set nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : address
                DIG 3;      # address : set nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                PAIR;       # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                PAIR;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
              }; # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
            NIL operation; # list operation : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
          }; # list operation : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair string bytes
                # == set_metadata ==
                # sp.verify(sp.sender == self.data.administrator, 'FA2_NOT_ADMIN') # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair string bytes
                DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair string bytes
                DUG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair string bytes : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair string bytes : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair address (set nat) : pair string bytes : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # address : pair string bytes : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SENDER;     # @sender : address : pair string bytes : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                COMPARE;    # int : pair string bytes : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                EQ;         # bool : pair string bytes : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {}
                  {
                    PUSH string "FA2_NOT_ADMIN"; # string : pair string bytes : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }; # pair string bytes : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair string bytes
                # self.data.metadata[params.k] = params.v # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair string bytes
                UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair string bytes
                UNPAIR;     # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair string bytes
                SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair string bytes
                UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair string bytes
                SWAP;       # big_map string bytes : big_map (pair address nat) nat : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair string bytes
                DUP 5;      # pair string bytes : big_map string bytes : big_map (pair address nat) nat : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair string bytes
                CDR;        # bytes : big_map string bytes : big_map (pair address nat) nat : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair string bytes
                SOME;       # option bytes : big_map string bytes : big_map (pair address nat) nat : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair string bytes
                DIG 5;      # pair string bytes : option bytes : big_map string bytes : big_map (pair address nat) nat : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                CAR;        # string : option bytes : big_map string bytes : big_map (pair address nat) nat : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                UPDATE;     # big_map string bytes : big_map (pair address nat) nat : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                SWAP;       # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                SWAP;       # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                PAIR;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
              }
              {
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : bool
                # == set_pause ==
                # sp.verify(sp.sender == self.data.administrator, 'FA2_NOT_ADMIN') # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : bool
                DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : bool
                DUG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : bool : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : bool : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # pair address (set nat) : bool : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CAR;        # address : bool : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SENDER;     # @sender : address : bool : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                COMPARE;    # int : bool : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                EQ;         # bool : bool : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {}
                  {
                    PUSH string "FA2_NOT_ADMIN"; # string : bool : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }; # bool : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : bool
                # self.data.paused = params # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : bool
                UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : bool
                SWAP;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : bool
                UNPAIR;     # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : bool
                CAR;        # big_map (pair address (pair address nat)) unit : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : bool
                DIG 3;      # bool : big_map (pair address (pair address nat)) unit : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))
                SWAP;       # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))
                PAIR;       # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))
                PAIR;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))
                SWAP;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))
                PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
              }; # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
          }
          {
            IF_LEFT
              {
                SWAP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : list (pair address (list (pair address (pair nat nat))))
                # == transfer ==
                # sp.verify(~ self.data.paused, 'FA2_PAUSED') # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : list (pair address (list (pair address (pair nat nat))))
                DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : list (pair address (list (pair address (pair nat nat))))
                DUG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                GET 3;      # pair (big_map (pair address (pair address nat)) unit) bool : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                CDR;        # bool : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                IF
                  {
                    PUSH string "FA2_PAUSED"; # string : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    FAILWITH;   # FAILED
                  }
                  {}; # list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                # for transfer in params: ... # list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # list (pair address (list (pair address (pair nat nat)))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                ITER
                  {
                    # for tx in transfer.txs: ... # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    DUP;        # pair address (list (pair address (pair nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    CDR;        # list (pair address (pair nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    ITER
                      {
                        # sp.verify(((sp.sender == self.data.administrator) | (transfer.from_ == sp.sender)) | (self.data.operators.contains(sp.set_type_expr(sp.record(owner = transfer.from_, operator = sp.sender, token_id = tx.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id")))))), 'FA2_NOT_OPERATOR') # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        DUP 4;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        CAR;        # pair address (set nat) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        CAR;        # address : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        SENDER;     # @sender : address : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        EQ;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        IF
                          {
                            PUSH bool True; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }
                          {
                            SENDER;     # @sender : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP 3;      # pair address (list (pair address (pair nat nat))) : @sender : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # address : @sender : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            EQ;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        IF
                          {
                            PUSH bool True; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }
                          {
                            DUP 4;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET 3;      # pair (big_map (pair address (pair address nat)) unit) bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            SWAP;       # pair address (pair nat nat) : big_map (pair address (pair address nat)) unit : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map (pair address (pair address nat)) unit : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUG 2;      # pair address (pair nat nat) : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET 3;      # nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            SENDER;     # @sender : nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP 5;      # pair address (list (pair address (pair nat nat))) : @sender : nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # address : @sender : nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            PAIR 3;     # pair address (pair @sender nat) : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            MEM;        # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_OPERATOR"; # string : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            FAILWITH;   # FAILED
                          }; # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        # sp.verify(self.data.token_metadata.contains(tx.token_id), 'FA2_TOKEN_UNDEFINED') # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        DUP 4;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        GET 5;      # big_map nat (pair nat (map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        SWAP;       # pair address (pair nat nat) : big_map nat (pair nat (map string bytes)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map nat (pair nat (map string bytes)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        DUG 2;      # pair address (pair nat nat) : big_map nat (pair nat (map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        GET 3;      # nat : big_map nat (pair nat (map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        MEM;        # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        IF
                          {}
                          {
                            PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            FAILWITH;   # FAILED
                          }; # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        # if tx.amount > 0: # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        GET 4;      # nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        PUSH nat 0; # nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        LT;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        IF
                          {
                            # sp.verify(self.data.ledger[(sp.set_type_expr(transfer.from_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance >= tx.amount, 'FA2_INSUFFICIENT_BALANCE') # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET 4;      # nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP 5;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET 3;      # big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP 3;      # pair address (pair nat nat) : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET 3;      # nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP 5;      # pair address (list (pair address (pair nat nat))) : nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # address : nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET;        # option nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            IF_NONE
                              {
                                PUSH int 404; # int : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                                FAILWITH;   # FAILED
                              }
                              {
                                # of_some: Get-item:404 # @some : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                              }; # @some : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GE;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            IF
                              {}
                              {
                                PUSH string "FA2_INSUFFICIENT_BALANCE"; # string : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                                FAILWITH;   # FAILED
                              }; # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            # self.data.ledger[(sp.set_type_expr(transfer.from_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance = sp.as_nat(self.data.ledger[(sp.set_type_expr(transfer.from_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance - tx.amount) # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP 4;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            UNPAIR;     # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP 6;      # pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET 3;      # nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP 8;      # pair address (list (pair address (pair nat nat))) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET;        # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            IF_NONE
                              {
                                PUSH int 408; # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                                FAILWITH;   # FAILED
                              }
                              {
                                DROP;       # pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                              }; # pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP 6;      # pair address (pair nat nat) : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET 4;      # nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DIG 9;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            GET 3;      # big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            DUP 8;      # pair address (pair nat nat) : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            GET 3;      # nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            DUP 10;     # pair address (list (pair address (pair nat nat))) : nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            CAR;        # address : nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            GET;        # option nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            IF_NONE
                              {
                                PUSH int 408; # int : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                FAILWITH;   # FAILED
                              }
                              {
                                # of_some: Get-item:408 # @some : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                              }; # @some : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            SUB;        # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            ISNAT;      # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            IF_NONE
                              {
                                PUSH int 408; # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            SOME;       # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            SWAP;       # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            PAIR;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            # if self.data.ledger.contains((sp.set_type_expr(tx.to_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))): # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            DUP;        # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            DUG 4;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET 3;      # big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            SWAP;       # pair address (pair nat nat) : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            GET 3;      # nat : pair address (pair nat nat) : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            SWAP;       # pair address (pair nat nat) : nat : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : nat : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            DUG 3;      # pair address (pair nat nat) : nat : big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # address : nat : big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            MEM;        # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            IF
                              {
                                # self.data.ledger[(sp.set_type_expr(tx.to_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))].balance += tx.amount # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                                DIG 3;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DIG 5;      # pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET 3;      # nat : pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address (pair nat nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUG 7;      # pair address (pair nat nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET;        # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                IF_NONE
                                  {
                                    PUSH int 411; # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DIG 6;      # pair address (pair nat nat) : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET 4;      # nat : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                ADD;        # nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SOME;       # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUG 2;      # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                              }
                              {
                                # self.data.ledger[(sp.set_type_expr(tx.to_, sp.TAddress), sp.set_type_expr(tx.token_id, sp.TNat))] = sp.record(balance = tx.amount) # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                                DIG 3;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP 5;      # pair address (pair nat nat) : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET 4;      # nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SOME;       # option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DIG 5;      # pair address (pair nat nat) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET 3;      # nat : pair address (pair nat nat) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address (pair nat nat) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                CAR;        # address : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address (set nat) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address (set nat) : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUG 2;      # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                              }; # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }
                          {
                            DROP;       # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }; # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                      }; # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    DROP;       # list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }; # list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DROP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
              }
              {
                # == update_operators ==
                # for update in params: ... # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DUP;        # list (or (pair address (pair address nat)) (pair address (pair address nat))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                ITER
                  {
                    # with update.match_cases(...): # or (pair address (pair address nat)) (pair address (pair address nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                    IF_LEFT
                      {
                        # sp.verify((add_operator.owner == sp.sender) | (sp.sender == self.data.administrator), 'FA2_NOT_ADMIN_OR_OPERATOR') # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        IF
                          {
                            PUSH bool True; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }
                          {
                            DUP 3;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # pair address (set nat) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_ADMIN_OR_OPERATOR"; # string : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            FAILWITH;   # FAILED
                          }; # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        # self.data.operators[sp.set_type_expr(sp.record(owner = add_operator.owner, operator = add_operator.operator, token_id = add_operator.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))))] = sp.unit # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        DIG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PUSH (option unit) (Some Unit); # option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DIG 5;      # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        GET 4;      # nat : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        GET 3;      # address : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair address (pair address nat) : address : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        CAR;        # address : address : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UPDATE;     # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                      }
                      {
                        # sp.verify((remove_operator.owner == sp.sender) | (sp.sender == self.data.administrator), 'FA2_NOT_ADMIN_OR_OPERATOR') # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        IF
                          {
                            PUSH bool True; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }
                          {
                            DUP 3;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # pair address (set nat) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                          }; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_ADMIN_OR_OPERATOR"; # string : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                            FAILWITH;   # FAILED
                          }; # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        # del self.data.operators[sp.set_type_expr(sp.record(owner = remove_operator.owner, operator = remove_operator.operator, token_id = remove_operator.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))))] # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                        DIG 2;      # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        NONE unit;  # option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DIG 5;      # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        GET 4;      # nat : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        GET 3;      # address : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair address (pair address nat) : address : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        CAR;        # address : address : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UPDATE;     # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                      }; # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                  }; # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
                DROP;       # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
              }; # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
          }; # pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
        NIL operation; # list operation : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
      }; # list operation : pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat))))
    PAIR;       # pair (list operation) (pair (pair (pair address (set nat)) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (pair (big_map address nat) (big_map nat nat)))))
  };